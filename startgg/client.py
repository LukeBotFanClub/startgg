# Generated by ariadne-codegen on 2023-04-29 17:47
# Source: queries.graphql

from typing import Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .gamer_tag import GamerTag
from .in_progress_results import InProgressResults
from .last_result import LastResult
from .upcoming import Upcoming


def gql(q: str) -> str:
    return q


class StartGGClient(AsyncBaseClient):
    async def gamer_tag(self, id: Union[Optional[str], UnsetType] = UNSET) -> GamerTag:
        query = gql(
            """
            query GamerTag($id: ID) {
              user(id: $id) {
                id
                slug
                player {
                  gamerTag
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"id": id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GamerTag.parse_obj(data)

    async def last_result(
        self,
        id: Union[Optional[str], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        gamer_tag: Union[Optional[str], UnsetType] = UNSET,
    ) -> LastResult:
        query = gql(
            """
            query LastResult($id: ID, $perPage: Int, $gamerTag: String) {
              user(id: $id) {
                events(query: {perPage: $perPage, page: 1}) {
                  nodes {
                    tournament {
                      name
                      id
                      shortSlug
                    }
                    id
                    name
                    numEntrants
                    state
                    standings(
                      query: {perPage: $perPage, page: 1, filter: {search: {searchString: $gamerTag}}}
                    ) {
                      nodes {
                        entrant {
                          id
                        }
                        placement
                        isFinal
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "id": id,
            "perPage": per_page,
            "gamerTag": gamer_tag,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return LastResult.parse_obj(data)

    async def upcoming(
        self,
        id: Union[Optional[str], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        gamer_tag: Union[Optional[str], UnsetType] = UNSET,
    ) -> Upcoming:
        query = gql(
            """
            query Upcoming($id: ID, $perPage: Int, $gamerTag: String) {
              user(id: $id) {
                tournaments(query: {perPage: $perPage, page: 1, filter: {upcoming: true}}) {
                  nodes {
                    name
                    id
                    shortSlug
                    startAt
                    state
                    events(limit: 3) {
                      id
                      name
                      videogame {
                        id
                      }
                      entrants(query: {filter: {name: $gamerTag}}) {
                        nodes {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "id": id,
            "perPage": per_page,
            "gamerTag": gamer_tag,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return Upcoming.parse_obj(data)

    async def in_progress_results(
        self,
        event_id: Union[Optional[str], UnsetType] = UNSET,
        entrant_id: Union[Optional[str], UnsetType] = UNSET,
    ) -> InProgressResults:
        query = gql(
            """
            query InProgressResults($event_id: ID, $entrant_id: ID) {
              event(id: $event_id) {
                tournament {
                  name
                }
                name
                sets(filters: {entrantIds: [$entrant_id]}) {
                  nodes {
                    fullRoundText
                    displayScore
                    wPlacement
                    lPlacement
                    winnerId
                    round
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"event_id": event_id, "entrant_id": entrant_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return InProgressResults.parse_obj(data)
